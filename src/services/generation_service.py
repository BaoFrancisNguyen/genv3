"""
Service de G√©n√©ration - Couche m√©tier pour la g√©n√©ration de donn√©es √©lectriques
==============================================================================

Ce service orchestre la g√©n√©ration compl√®te des donn√©es √©lectriques
en coordonnant les diff√©rents composants et en ajoutant la logique m√©tier.
"""

import logging
import pandas as pd
from datetime import datetime
from typing import Dict, List, Optional

from src.core.generator import ElectricityDataGenerator, validate_generation_parameters, estimate_generation_time
from src.models.building import Building, validate_building_list
from src.models.timeseries import TimeSeries, timeseries_to_dataframe, validate_timeseries_data


# Configuration du logger
logger = logging.getLogger(__name__)


class GenerationService:
    """
    Service m√©tier pour la g√©n√©ration de donn√©es √©lectriques
    
    Coordonne la g√©n√©ration compl√®te en g√©rant la validation,
    l'optimisation et la qualit√© des donn√©es produites.
    """
    
    def __init__(self, generator: ElectricityDataGenerator):
        """
        Initialise le service de g√©n√©ration
        
        Args:
            generator: Instance du g√©n√©rateur de donn√©es √©lectriques
        """
        self.generator = generator
        self.service_statistics = {
            'total_generations': 0,
            'successful_generations': 0,
            'total_buildings_processed': 0,
            'total_observations_created': 0,
            'service_start_time': datetime.now()
        }
        
        logger.info("‚úÖ Service de g√©n√©ration initialis√©")
    
    def generate_complete_dataset(
        self,
        zone_name: str,
        buildings_osm: List[Dict],
        start_date: str,
        end_date: str,
        frequency: str = '30T'
    ) -> Dict:
        """
        G√©n√®re un dataset complet avec b√¢timents et s√©ries temporelles
        
        Args:
            zone_name: Nom de la zone
            buildings_osm: Donn√©es des b√¢timents OSM
            start_date: Date de d√©but (YYYY-MM-DD)
            end_date: Date de fin (YYYY-MM-DD)
            frequency: Fr√©quence d'√©chantillonnage
            
        Returns:
            Dict: Dataset complet avec m√©tadonn√©es
        """
        try:
            logger.info(f"üîÑ G√©n√©ration dataset complet - Zone: {zone_name}")
            logger.info(f"üìä {len(buildings_osm)} b√¢timents, p√©riode: {start_date} ‚Üí {end_date}")
            
            # Mise √† jour des statistiques
            self.service_statistics['total_generations'] += 1
            
            # Phase 1: Validation des param√®tres
            validation_result = self._validate_generation_request(
                buildings_osm, start_date, end_date, frequency
            )
            
            if not validation_result['valid']:
                return {
                    'success': False,
                    'error': 'Param√®tres invalides',
                    'validation_errors': validation_result['errors']
                }
            
            # Phase 2: Conversion des b√¢timents OSM en objets Building
            buildings_conversion = self._convert_osm_to_buildings(buildings_osm, zone_name)
            
            if not buildings_conversion['success']:
                return buildings_conversion
            
            buildings = buildings_conversion['buildings']
            self.service_statistics['total_buildings_processed'] += len(buildings)
            
            # Phase 3: G√©n√©ration des m√©tadonn√©es de b√¢timents
            buildings_df = self.generator.generate_building_metadata(buildings)
            
            # Phase 4: G√©n√©ration des s√©ries temporelles
            timeseries_df = self.generator.generate_timeseries_for_buildings(
                buildings, start_date, end_date, frequency
            )
            
            self.service_statistics['total_observations_created'] += len(timeseries_df)
            
            # Phase 5: Validation et nettoyage des donn√©es g√©n√©r√©es
            quality_check = self._perform_quality_check(buildings_df, timeseries_df)
            
            # Phase 6: G√©n√©ration du r√©sum√© statistique
            summary = self.generator.get_generation_summary(buildings, timeseries_df)
            
            # Mise √† jour des statistiques de succ√®s
            self.service_statistics['successful_generations'] += 1
            
            # Construction de la r√©ponse compl√®te
            response = {
                'success': True,
                'zone_name': zone_name,
                'generation_timestamp': datetime.now().isoformat(),
                'buildings_data': buildings_df.to_dict('records'),
                'timeseries_data': timeseries_df.to_dict('records'),
                'statistics': {
                    'total_buildings': len(buildings),
                    'total_observations': len(timeseries_df),
                    'date_range': {
                        'start': start_date,
                        'end': end_date,
                        'frequency': frequency
                    },
                    'generation_summary': summary,
                    'quality_metrics': quality_check
                },
                'conversion_info': buildings_conversion['conversion_info'],
                'validation_warnings': validation_result.get('warnings', [])
            }
            
            logger.info(f"‚úÖ G√©n√©ration termin√©e: {len(timeseries_df)} observations cr√©√©es")
            return response
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration dataset: {str(e)}")
            return {
                'success': False,
                'error': f"Erreur de g√©n√©ration: {str(e)}",
                'zone_name': zone_name
            }
    
    def _validate_generation_request(
        self,
        buildings_osm: List[Dict],
        start_date: str,
        end_date: str,
        frequency: str
    ) -> Dict:
        """
        Valide une requ√™te de g√©n√©ration compl√®te
        
        Args:
            buildings_osm: Donn√©es des b√¢timents OSM
            start_date: Date de d√©but
            end_date: Date de fin
            frequency: Fr√©quence
            
        Returns:
            Dict: R√©sultats de validation
        """
        errors = []
        warnings = []
        
        # Validation des b√¢timents OSM
        if not buildings_osm:
            errors.append("Aucun b√¢timent OSM fourni")
        elif len(buildings_osm) > 10000:
            errors.append("Trop de b√¢timents (max 10000)")
        elif len(buildings_osm) > 5000:
            warnings.append("Grand nombre de b√¢timents - g√©n√©ration longue")
        
        # Validation des param√®tres temporels
        params_valid, param_errors = validate_generation_parameters(
            start_date, end_date, frequency, len(buildings_osm)
        )
        
        if not params_valid:
            errors.extend(param_errors)
        
        # Validation de la coh√©rence des donn√©es OSM
        osm_validation = self._validate_osm_data_quality(buildings_osm)
        if osm_validation['warnings']:
            warnings.extend(osm_validation['warnings'])
        if osm_validation['critical_errors']:
            errors.extend(osm_validation['critical_errors'])
        
        return {
            'valid': len(errors) == 0,
            'errors': errors,
            'warnings': warnings,
            'osm_quality_score': osm_validation['quality_score']
        }
    
    def _validate_osm_data_quality(self, buildings_osm: List[Dict]) -> Dict:
        """
        Valide la qualit√© des donn√©es OSM
        
        Args:
            buildings_osm: Donn√©es des b√¢timents OSM
            
        Returns:
            Dict: √âvaluation de qualit√©
        """
        if not buildings_osm:
            return {
                'quality_score': 0,
                'warnings': [],
                'critical_errors': ['Aucune donn√©e OSM']
            }
        
        warnings = []
        critical_errors = []
        quality_metrics = {
            'has_coordinates': 0,
            'has_building_type': 0,
            'has_valid_coordinates': 0,
            'has_osm_id': 0
        }
        
        for i, building_data in enumerate(buildings_osm):
            # V√©rification coordonn√©es
            lat = building_data.get('latitude') or building_data.get('lat')
            lon = building_data.get('longitude') or building_data.get('lon')
            
            if lat is not None and lon is not None:
                quality_metrics['has_coordinates'] += 1
                
                # Validation coordonn√©es Malaysia
                if 0.5 <= float(lat) <= 7.5 and 99.0 <= float(lon) <= 120.0:
                    quality_metrics['has_valid_coordinates'] += 1
                else:
                    warnings.append(f"B√¢timent {i}: coordonn√©es hors Malaysia")
            else:
                warnings.append(f"B√¢timent {i}: coordonn√©es manquantes")
            
            # V√©rification type de b√¢timent
            building_type = building_data.get('building_type') or building_data.get('type')
            if building_type and building_type != 'yes':
                quality_metrics['has_building_type'] += 1
            
            # V√©rification ID OSM
            osm_id = building_data.get('osm_id') or building_data.get('id')
            if osm_id:
                quality_metrics['has_osm_id'] += 1
        
        # Calcul du score de qualit√©
        total = len(buildings_osm)
        quality_score = (
            (quality_metrics['has_valid_coordinates'] / total) * 40 +
            (quality_metrics['has_building_type'] / total) * 30 +
            (quality_metrics['has_osm_id'] / total) * 20 +
            (quality_metrics['has_coordinates'] / total) * 10
        )
        
        # D√©tection d'erreurs critiques
        if quality_metrics['has_coordinates'] == 0:
            critical_errors.append("Aucun b√¢timent avec coordonn√©es")
        
        if quality_metrics['has_valid_coordinates'] / total < 0.5:
            critical_errors.append("Moins de 50% des coordonn√©es sont valides")
        
        return {
            'quality_score': round(quality_score, 1),
            'warnings': warnings,
            'critical_errors': critical_errors,
            'metrics': quality_metrics
        }
    
    def _convert_osm_to_buildings(self, buildings_osm: List[Dict], zone_name: str) -> Dict:
        """
        Convertit les donn√©es OSM en objets Building
        
        Args:
            buildings_osm: Donn√©es OSM brutes
            zone_name: Nom de la zone
            
        Returns:
            Dict: R√©sultats de conversion
        """
        try:
            buildings = []
            conversion_stats = {
                'attempted': len(buildings_osm),
                'successful': 0,
                'failed': 0,
                'warnings': []
            }
            
            for i, osm_data in enumerate(buildings_osm):
                try:
                    # Normalisation des donn√©es OSM
                    normalized_data = self._normalize_osm_data(osm_data)
                    
                    # Cr√©ation du b√¢timent
                    building = Building.from_osm_data(normalized_data, zone_name)
                    buildings.append(building)
                    conversion_stats['successful'] += 1
                    
                except Exception as e:
                    conversion_stats['failed'] += 1
                    conversion_stats['warnings'].append(
                        f"B√¢timent {i}: conversion √©chou√©e ({str(e)})"
                    )
                    logger.warning(f"‚ö†Ô∏è Conversion √©chou√©e b√¢timent {i}: {str(e)}")
            
            # Validation des b√¢timents cr√©√©s
            valid_buildings, validation_errors = validate_building_list(buildings)
            
            if validation_errors:
                conversion_stats['warnings'].extend(validation_errors)
            
            logger.info(f"üèóÔ∏è Conversion OSM: {len(valid_buildings)}/{len(buildings_osm)} r√©ussies")
            
            return {
                'success': True,
                'buildings': valid_buildings,
                'conversion_info': conversion_stats
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur conversion OSM: {str(e)}")
            return {
                'success': False,
                'error': f"Erreur conversion: {str(e)}",
                'buildings': []
            }
    
    def _normalize_osm_data(self, osm_data: Dict) -> Dict:
        """
        Normalise les donn√©es OSM pour la cr√©ation de Building
        
        Args:
            osm_data: Donn√©es OSM brutes
            
        Returns:
            Dict: Donn√©es normalis√©es
        """
        # Mapping des champs alternatifs
        normalized = {
            'id': osm_data.get('osm_id') or osm_data.get('id'),
            'lat': osm_data.get('latitude') or osm_data.get('lat'),
            'lon': osm_data.get('longitude') or osm_data.get('lon'),
            'tags': osm_data.get('tags', {}),
            'geometry': osm_data.get('geometry', [])
        }
        
        # Normalisation du type de b√¢timent
        building_type = (
            osm_data.get('building_type') or 
            osm_data.get('type') or 
            normalized['tags'].get('building', 'residential')
        )
        
        if building_type == 'yes':
            building_type = 'residential'
        
        normalized['tags']['building'] = building_type
        
        # Normalisation de la g√©om√©trie
        if not normalized['geometry'] and normalized['lat'] and normalized['lon']:
            normalized['geometry'] = [{'lat': normalized['lat'], 'lon': normalized['lon']}]
        
        return normalized
    
    def _perform_quality_check(self, buildings_df: pd.DataFrame, timeseries_df: pd.DataFrame) -> Dict:
        """
        Effectue un contr√¥le qualit√© des donn√©es g√©n√©r√©es
        
        Args:
            buildings_df: DataFrame des b√¢timents
            timeseries_df: DataFrame des s√©ries temporelles
            
        Returns:
            Dict: M√©triques de qualit√©
        """
        quality_metrics = {
            'buildings_quality': {},
            'timeseries_quality': {},
            'overall_score': 0
        }
        
        # Qualit√© des b√¢timents
        if not buildings_df.empty:
            buildings_quality = {
                'total_buildings': len(buildings_df),
                'complete_coordinates': (buildings_df[['latitude', 'longitude']].notna().all(axis=1)).sum(),
                'valid_types': (buildings_df['building_type'] != 'unknown').sum(),
                'positive_consumption': (buildings_df['base_consumption_kwh'] > 0).sum()
            }
            
            buildings_score = (
                (buildings_quality['complete_coordinates'] / buildings_quality['total_buildings']) * 40 +
                (buildings_quality['valid_types'] / buildings_quality['total_buildings']) * 35 +
                (buildings_quality['positive_consumption'] / buildings_quality['total_buildings']) * 25
            )
            
            quality_metrics['buildings_quality'] = {
                **buildings_quality,
                'score': round(buildings_score, 1)
            }
        
        # Qualit√© des s√©ries temporelles
        if not timeseries_df.empty:
            timeseries_quality = {
                'total_observations': len(timeseries_df),
                'positive_consumption': (timeseries_df['consumption_kwh'] > 0).sum(),
                'realistic_temperature': ((timeseries_df['temperature_c'] >= 20) & 
                                        (timeseries_df['temperature_c'] <= 45)).sum(),
                'valid_humidity': ((timeseries_df['humidity'] >= 0.3) & 
                                 (timeseries_df['humidity'] <= 1.0)).sum()
            }
            
            timeseries_score = (
                (timeseries_quality['positive_consumption'] / timeseries_quality['total_observations']) * 50 +
                (timeseries_quality['realistic_temperature'] / timeseries_quality['total_observations']) * 25 +
                (timeseries_quality['valid_humidity'] / timeseries_quality['total_observations']) * 25
            )
            
            quality_metrics['timeseries_quality'] = {
                **timeseries_quality,
                'score': round(timeseries_score, 1)
            }
        
        # Score global
        building_score = quality_metrics['buildings_quality'].get('score', 0)
        timeseries_score = quality_metrics['timeseries_quality'].get('score', 0)
        quality_metrics['overall_score'] = round((building_score + timeseries_score) / 2, 1)
        
        return quality_metrics
    
    def estimate_generation_resources(
        self,
        num_buildings: int,
        start_date: str,
        end_date: str,
        frequency: str
    ) -> Dict:
        """
        Estime les ressources n√©cessaires pour une g√©n√©ration
        
        Args:
            num_buildings: Nombre de b√¢timents
            start_date: Date de d√©but
            end_date: Date de fin
            frequency: Fr√©quence
            
        Returns:
            Dict: Estimations d√©taill√©es
        """
        try:
            # Estimation de base via le g√©n√©rateur
            base_estimation = estimate_generation_time(
                num_buildings, start_date, end_date, frequency
            )
            
            # Enrichissement avec logique m√©tier
            enhanced_estimation = base_estimation.copy()
            
            # Facteurs d'ajustement selon la complexit√©
            if num_buildings > 1000:
                enhanced_estimation['memory_usage_mb'] = num_buildings * 0.5
                enhanced_estimation['recommended_ram_gb'] = max(4, num_buildings / 2000)
            else:
                enhanced_estimation['memory_usage_mb'] = 50
                enhanced_estimation['recommended_ram_gb'] = 2
            
            # Recommandations de performance
            recommendations = []
            
            if enhanced_estimation.get('total_data_points', 0) > 100000:
                recommendations.append("G√©n√©ration en plusieurs √©tapes recommand√©e")
            
            if enhanced_estimation.get('estimated_duration_seconds', 0) > 300:
                recommendations.append("Pr√©voir 5+ minutes - ne pas fermer le navigateur")
            
            enhanced_estimation['performance_recommendations'] = recommendations
            
            return {
                'success': True,
                'estimation': enhanced_estimation
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur estimation: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def get_service_status(self) -> Dict:
        """
        Retourne l'√©tat du service de g√©n√©ration
        
        Returns:
            Dict: √âtat d√©taill√© du service
        """
        uptime = datetime.now() - self.service_statistics['service_start_time']
        
        success_rate = 0
        if self.service_statistics['total_generations'] > 0:
            success_rate = (
                self.service_statistics['successful_generations'] / 
                self.service_statistics['total_generations']
            ) * 100
        
        return {
            'service_name': 'Generation Service',
            'status': 'active',
            'uptime_seconds': int(uptime.total_seconds()),
            'statistics': {
                'total_generations': self.service_statistics['total_generations'],
                'successful_generations': self.service_statistics['successful_generations'],
                'success_rate_percent': round(success_rate, 1),
                'total_buildings_processed': self.service_statistics['total_buildings_processed'],
                'total_observations_created': self.service_statistics['total_observations_created']
            }
        }
    
    def get_statistics(self) -> Dict:
        """
        Retourne les statistiques d√©taill√©es du service
        
        Returns:
            Dict: Statistiques compl√®tes
        """
        return self.service_statistics.copy()


# ==============================================================================
# FONCTIONS UTILITAIRES DU SERVICE
# ==============================================================================

def calculate_generation_complexity(
    num_buildings: int,
    date_range_days: int,
    frequency_minutes: int
) -> str:
    """
    Calcule le niveau de complexit√© d'une g√©n√©ration
    
    Args:
        num_buildings: Nombre de b√¢timents
        date_range_days: Nombre de jours
        frequency_minutes: Fr√©quence en minutes
        
    Returns:
        str: Niveau de complexit√©
    """
    points_per_day = (24 * 60) / frequency_minutes
    total_points = num_buildings * date_range_days * points_per_day
    
    if total_points < 10000:
        return 'simple'
    elif total_points < 100000:
        return 'mod√©r√©'
    elif total_points < 1000000:
        return 'complexe'
    else:
        return 'tr√®s_complexe'


def optimize_generation_parameters(
    num_buildings: int,
    start_date: str,
    end_date: str,
    frequency: str
) -> Dict:
    """
    Optimise les param√®tres de g√©n√©ration selon les contraintes
    
    Args:
        num_buildings: Nombre de b√¢timents
        start_date: Date de d√©but
        end_date: Date de fin
        frequency: Fr√©quence
        
    Returns:
        Dict: Param√®tres optimis√©s et suggestions
    """
    suggestions = {
        'optimized_frequency': frequency,
        'batch_size': num_buildings,
        'recommendations': []
    }
    
    # Calcul de la complexit√©
    date_range = pd.to_datetime(end_date) - pd.to_datetime(start_date)
    days = date_range.days
    
    freq_minutes = {'15T': 15, '30T': 30, '1H': 60, '3H': 180, 'D': 1440}.get(frequency, 30)
    complexity = calculate_generation_complexity(num_buildings, days, freq_minutes)
    
    # Optimisations selon la complexit√©
    if complexity == 'tr√®s_complexe':
        if freq_minutes < 60:
            suggestions['optimized_frequency'] = '1H'
            suggestions['recommendations'].append("Fr√©quence r√©duite pour am√©liorer les performances")
        
        if num_buildings > 5000:
            suggestions['batch_size'] = 2500
            suggestions['recommendations'].append("Traitement par lots recommand√©")
    
    elif complexity == 'complexe':
        if num_buildings > 3000:
            suggestions['batch_size'] = 1500
            suggestions['recommendations'].append("Traitement en lots pour optimiser")
    
    return suggestions


# ==============================================================================
# EXEMPLE D'UTILISATION
# ==============================================================================

if __name__ == '__main__':
    # Test du service de g√©n√©ration
    from src.core.generator import ElectricityDataGenerator
    
    # Initialisation
    generator = ElectricityDataGenerator()
    generation_service = GenerationService(generator)
    
    # Donn√©es OSM de test
    test_osm_buildings = [
        {
            'osm_id': '12345',
            'latitude': 3.15,
            'longitude': 101.7,
            'building_type': 'residential',
            'tags': {'building': 'residential'}
        },
        {
            'osm_id': '12346',
            'latitude': 3.16,
            'longitude': 101.71,
            'building_type': 'commercial',
            'tags': {'building': 'commercial'}
        }
    ]
    
    # Test de g√©n√©ration
    result = generation_service.generate_complete_dataset(
        zone_name='test_zone',
        buildings_osm=test_osm_buildings,
        start_date='2024-01-01',
        end_date='2024-01-02',
        frequency='1H'
    )
    
    if result['success']:
        print(f"‚úÖ G√©n√©ration test r√©ussie:")
        print(f"üìä {result['statistics']['total_buildings']} b√¢timents")
        print(f"‚è∞ {result['statistics']['total_observations']} observations")
        print(f"üéØ Score qualit√©: {result['statistics']['quality_metrics']['overall_score']}")
    else:
        print(f"‚ùå G√©n√©ration √©chou√©e: {result['error']}")
    
    # Statut du service
    status = generation_service.get_service_status()
    print(f"üìà Service: {status['statistics']['success_rate_percent']}% succ√®s")
