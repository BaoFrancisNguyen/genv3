"""
Service OSM - Couche m√©tier pour OpenStreetMap
==============================================

Ce service fait l'interface entre l'application et le gestionnaire OSM,
en ajoutant la logique m√©tier et la gestion d'erreurs de haut niveau.
"""

import logging
from typing import Dict, List, Optional
from datetime import datetime

from src.core.osm_handler import OSMHandler, OSMQueryResult
from src.models.building import Building
from config import MALAYSIA_ZONES


# Configuration du logger
logger = logging.getLogger(__name__)


class OSMService:
    """
    Service m√©tier pour les op√©rations OpenStreetMap
    
    Encapsule la logique m√©tier, la validation et la gestion d'erreurs
    pour toutes les op√©rations li√©es √† OSM.
    """
    
    def __init__(self, osm_handler: OSMHandler):
        """
        Initialise le service OSM
        
        Args:
            osm_handler: Instance du gestionnaire OSM
        """
        self.osm_handler = osm_handler
        self.last_query_result = None
        self.service_statistics = {
            'successful_queries': 0,
            'failed_queries': 0,
            'total_buildings_loaded': 0,
            'service_start_time': datetime.now()
        }
        
        logger.info("‚úÖ Service OSM initialis√©")
    
    def get_available_zones(self) -> List[Dict]:
        """
        Retourne la liste compl√®te des zones disponibles pour OSM
        
        Returns:
            List[Dict]: Zones disponibles avec m√©tadonn√©es compl√®tes
        """
        try:
            zones = []
            
            # Malaysia enti√®re
            if hasattr(MALAYSIA_ZONES, 'COUNTRY'):
                for zone_id, zone_data in MALAYSIA_ZONES.COUNTRY.items():
                    zone_info = {
                        'zone_id': zone_id,
                        'name': zone_data['name'],
                        'type': zone_data.get('type', 'country'),
                        'population': zone_data.get('population', 0),
                        'estimated_buildings': zone_data.get('estimated_buildings', 0),
                        'area_km2': zone_data.get('area_km2', 0),
                        'complexity_level': self._get_complexity_level(zone_data.get('estimated_buildings', 0)),
                        'has_osm_relation': bool(zone_data.get('osm_relation_id')),
                        'recommended': False,  # Pays entier non recommand√©
                        'warning': zone_data.get('warning', ''),
                        'bbox': zone_data.get('bbox', [])
                    }
                    zones.append(zone_info)
            
            # √âtats
            if hasattr(MALAYSIA_ZONES, 'STATES'):
                for zone_id, zone_data in MALAYSIA_ZONES.STATES.items():
                    zone_info = {
                        'zone_id': zone_id,
                        'name': zone_data['name'],
                        'type': zone_data.get('type', 'state'),
                        'population': zone_data.get('population', 0),
                        'estimated_buildings': zone_data.get('estimated_buildings', 0),
                        'area_km2': zone_data.get('area_km2', 0),
                        'complexity_level': self._get_complexity_level(zone_data.get('estimated_buildings', 0)),
                        'has_osm_relation': bool(zone_data.get('osm_relation_id')),
                        'recommended': zone_data.get('estimated_buildings', 0) < 300000,
                        'capital': zone_data.get('capital', ''),
                        'bbox': zone_data.get('bbox', [])
                    }
                    zones.append(zone_info)
            
            # Territoires f√©d√©raux
            if hasattr(MALAYSIA_ZONES, 'FEDERAL_TERRITORIES'):
                for zone_id, zone_data in MALAYSIA_ZONES.FEDERAL_TERRITORIES.items():
                    zone_info = {
                        'zone_id': zone_id,
                        'name': zone_data['name'],
                        'type': zone_data.get('type', 'federal_territory'),
                        'population': zone_data.get('population', 0),
                        'estimated_buildings': zone_data.get('estimated_buildings', 0),
                        'area_km2': zone_data.get('area_km2', 0),
                        'complexity_level': self._get_complexity_level(zone_data.get('estimated_buildings', 0)),
                        'has_osm_relation': bool(zone_data.get('osm_relation_id')),
                        'recommended': True,  # Territoires f√©d√©raux recommand√©s
                        'bbox': zone_data.get('bbox', [])
                    }
                    zones.append(zone_info)
            
            # Villes principales
            if hasattr(MALAYSIA_ZONES, 'MAJOR_CITIES'):
                for zone_id, zone_data in MALAYSIA_ZONES.MAJOR_CITIES.items():
                    # √âviter les doublons (d√©j√† dans territoires f√©d√©raux)
                    if zone_id not in ['kuala_lumpur', 'putrajaya', 'labuan']:
                        zone_info = {
                            'zone_id': zone_id,
                            'name': zone_data['name'],
                            'type': 'city',
                            'state': zone_data.get('state', ''),
                            'population': zone_data.get('population', 0),
                            'estimated_buildings': zone_data.get('estimated_buildings', 0),
                            'area_km2': zone_data.get('area_km2', 0),
                            'complexity_level': self._get_complexity_level(zone_data.get('estimated_buildings', 0)),
                            'has_osm_relation': bool(zone_data.get('osm_relation_id')),
                            'recommended': zone_data.get('estimated_buildings', 0) < 100000,
                            'importance': zone_data.get('importance', ''),
                            'bbox': zone_data.get('bbox', [])
                        }
                        zones.append(zone_info)
            
            # R√©gions sp√©ciales
            if hasattr(MALAYSIA_ZONES, 'SPECIAL_REGIONS'):
                for zone_id, zone_data in MALAYSIA_ZONES.SPECIAL_REGIONS.items():
                    zone_info = {
                        'zone_id': zone_id,
                        'name': zone_data['name'],
                        'type': zone_data.get('type', 'special'),
                        'description': zone_data.get('description', ''),
                        'population': zone_data.get('population', 0),
                        'estimated_buildings': zone_data.get('estimated_buildings', 0),
                        'area_km2': zone_data.get('area_km2', 0),
                        'complexity_level': self._get_complexity_level(zone_data.get('estimated_buildings', 0)),
                        'has_osm_relation': False,  # R√©gions sp√©ciales n'ont pas de relation OSM directe
                        'recommended': False,  # R√©gions complexes
                        'cities': zone_data.get('cities', []),
                        'bbox': zone_data.get('bbox', [])
                    }
                    zones.append(zone_info)
            
            # Fallback vers l'ancienne configuration si la nouvelle n'existe pas
            if not zones and hasattr(MALAYSIA_ZONES, 'MAJOR_ZONES'):
                logger.info("üîÑ Utilisation de l'ancienne configuration MAJOR_ZONES")
                for zone_id, zone_data in MALAYSIA_ZONES.MAJOR_ZONES.items():
                    zone_info = {
                        'zone_id': zone_id,
                        'name': zone_data['name'],
                        'type': 'city',
                        'state': zone_data.get('state', ''),
                        'population': zone_data.get('population', 0),
                        'estimated_buildings': zone_data.get('estimated_buildings', 0),
                        'area_km2': zone_data.get('area_km2', 0),
                        'complexity_level': self._get_complexity_level(zone_data.get('estimated_buildings', 0)),
                        'has_osm_relation': bool(zone_data.get('osm_relation_id')),
                        'recommended': zone_data.get('estimated_buildings', 0) < 100000,
                        'bbox': zone_data.get('bbox', [])
                    }
                    zones.append(zone_info)
            
            # Tri par complexit√© (simple en premier) puis par population
            zones.sort(key=lambda x: (
                {'simple': 1, 'mod√©r√©': 2, 'complexe': 3, 'tr√®s_complexe': 4, 'extr√™me': 5}.get(x['complexity_level'], 3),
                -x['population']
            ))
            
            logger.info(f"üìç {len(zones)} zones disponibles")
            return zones
            
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration zones: {str(e)}")
            import traceback
            logger.error(traceback.format_exc())
            return []
    
    def _get_complexity_level(self, estimated_buildings: int) -> str:
        """D√©termine le niveau de complexit√© selon le nombre de b√¢timents"""
        if estimated_buildings < 10000:
            return 'simple'
        elif estimated_buildings < 50000:
            return 'mod√©r√©'
        elif estimated_buildings < 200000:
            return 'complexe'
        elif estimated_buildings < 1000000:
            return 'tr√®s_complexe'
        else:
            return 'extr√™me'
    
    def get_zone_estimation(self, zone_name: str) -> Dict:
        """
        Obtient l'estimation de complexit√© pour une zone
        
        Args:
            zone_name: Nom de la zone
            
        Returns:
            Dict: Estimation d√©taill√©e avec recommandations
        """
        try:
            # Chercher la zone dans toutes les cat√©gories
            zone_data = self._find_zone_in_all_categories(zone_name)
            
            if not zone_data:
                # D√©l√©gation au gestionnaire OSM pour compatibilit√©
                estimation = self.osm_handler.get_zone_estimation(zone_name)
                return estimation
            
            # Calculs d'estimation
            estimated_buildings = zone_data.get('estimated_buildings', 1000)
            area_km2 = zone_data.get('area_km2', 100)
            
            # Estimation du temps (base: 50000 b√¢timents/minute)
            estimated_time_minutes = max(0.1, estimated_buildings / 50000)
            
            # Estimation de la taille (base: 200 bytes/b√¢timent/jour)
            estimated_size_mb = max(0.1, (estimated_buildings * 200 * 31) / (1024 * 1024))  # 31 jours par d√©faut
            
            # Niveau de complexit√©
            complexity_level = self._get_complexity_level(estimated_buildings)
            
            # Recommandations selon la complexit√©
            recommendations = {
                'simple': 'G√©n√©ration rapide recommand√©e',
                'mod√©r√©': 'G√©n√©ration standard, quelques minutes',
                'complexe': 'G√©n√©ration longue, soyez patient',
                'tr√®s_complexe': 'G√©n√©ration tr√®s longue, consid√©rer la subdivision en zones plus petites',
                'extr√™me': 'G√©n√©ration extr√™mement longue (plusieurs heures), fortement recommand√© de subdiviser'
            }
            
            # Warnings sp√©ciaux
            warnings = []
            if estimated_buildings > 1000000:
                warnings.append("ATTENTION: Volume tr√®s √©lev√© - g√©n√©ration de plusieurs heures")
            if estimated_buildings > 500000:
                warnings.append("Assurez-vous d'avoir suffisamment de m√©moire RAM")
            if complexity_level == 'extr√™me':
                warnings.append("Consid√©rez utiliser une fr√©quence quotidienne plut√¥t qu'horaire")
            
            return {
                'zone_found': True,
                'zone_name': zone_data['name'],
                'zone_type': zone_data.get('type', 'unknown'),
                'estimated_buildings': estimated_buildings,
                'area_km2': area_km2,
                'estimated_time_minutes': round(estimated_time_minutes, 1),
                'estimated_size_mb': round(estimated_size_mb, 1),
                'complexity_level': complexity_level,
                'recommendation': recommendations.get(complexity_level, 'Complexit√© inconnue'),
                'warnings': warnings,
                'bbox': zone_data.get('bbox', []),
                'has_osm_relation': bool(zone_data.get('osm_relation_id'))
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur estimation zone {zone_name}: {str(e)}")
            return {
                'zone_found': False,
                'error': f"Erreur lors de l'estimation: {str(e)}"
            }
    
    def _find_zone_in_all_categories(self, zone_name: str) -> Optional[Dict]:
        """
        Cherche une zone dans toutes les cat√©gories disponibles
        
        Args:
            zone_name: Nom de la zone √† chercher
            
        Returns:
            Optional[Dict]: Donn√©es de la zone ou None si non trouv√©e
        """
        # Chercher dans toutes les cat√©gories
        categories = []
        
        if hasattr(MALAYSIA_ZONES, 'COUNTRY'):
            categories.append(MALAYSIA_ZONES.COUNTRY)
        if hasattr(MALAYSIA_ZONES, 'STATES'):
            categories.append(MALAYSIA_ZONES.STATES)
        if hasattr(MALAYSIA_ZONES, 'FEDERAL_TERRITORIES'):
            categories.append(MALAYSIA_ZONES.FEDERAL_TERRITORIES)
        if hasattr(MALAYSIA_ZONES, 'MAJOR_CITIES'):
            categories.append(MALAYSIA_ZONES.MAJOR_CITIES)
        if hasattr(MALAYSIA_ZONES, 'SPECIAL_REGIONS'):
            categories.append(MALAYSIA_ZONES.SPECIAL_REGIONS)
        
        # Fallback vers MAJOR_ZONES si les nouvelles cat√©gories n'existent pas
        if not categories and hasattr(MALAYSIA_ZONES, 'MAJOR_ZONES'):
            categories.append(MALAYSIA_ZONES.MAJOR_ZONES)
        
        for category in categories:
            if zone_name.lower() in category:
                return category[zone_name.lower()]
        
        return None
    
    def load_complete_zone_buildings(self, zone_name: str) -> Dict:
        """
        Charge tous les b√¢timents OSM d'une zone compl√®te
        
        Args:
            zone_name: Nom de la zone
            
        Returns:
            Dict: R√©sultat du chargement avec b√¢timents et m√©tadonn√©es
        """
        try:
            logger.info(f"üîÑ D√©but chargement zone compl√®te: {zone_name}")
            
            # Validation du nom de zone
            is_valid, error = self._validate_zone_name(zone_name)
            if not is_valid:
                self.service_statistics['failed_queries'] += 1
                return {
                    'success': False,
                    'zone_name': zone_name,
                    'error': error,
                    'buildings': []
                }
            
            # Ex√©cution de la requ√™te OSM
            osm_result = self.osm_handler.get_complete_locality_buildings(zone_name)
            
            # Traitement du r√©sultat
            if osm_result.success:
                self.service_statistics['successful_queries'] += 1
                self.service_statistics['total_buildings_loaded'] += len(osm_result.buildings)
                self.last_query_result = osm_result
                
                # Construction de la r√©ponse de service
                service_response = {
                    'success': True,
                    'zone_name': zone_name,
                    'buildings': [building.to_dict() for building in osm_result.buildings],
                    'metadata': {
                        'total_buildings': len(osm_result.buildings),
                        'total_osm_elements': osm_result.total_elements,
                        'query_time_seconds': osm_result.query_time_seconds,
                        'bbox_used': osm_result.bbox_used,
                        'warnings': osm_result.warnings or []
                    },
                    'quality_metrics': self._calculate_quality_metrics(osm_result.buildings),
                    'statistics': self._generate_building_statistics(osm_result.buildings)
                }
                
                logger.info(f"‚úÖ Zone charg√©e: {len(osm_result.buildings)} b√¢timents en {osm_result.query_time_seconds:.1f}s")
                return service_response
                
            else:
                self.service_statistics['failed_queries'] += 1
                
                return {
                    'success': False,
                    'zone_name': zone_name,
                    'error': osm_result.error_message,
                    'buildings': [],
                    'fallback_available': True,
                    'suggestions': self._get_fallback_suggestions(zone_name)
                }
                
        except Exception as e:
            self.service_statistics['failed_queries'] += 1
            logger.error(f"‚ùå Erreur service chargement zone {zone_name}: {str(e)}")
            
            return {
                'success': False,
                'zone_name': zone_name,
                'error': f"Erreur service: {str(e)}",
                'buildings': []
            }
    
    def _validate_zone_name(self, zone_name: str) -> tuple:
        """Valide le nom d'une zone"""
        if not zone_name or not isinstance(zone_name, str):
            return False, "Nom de zone invalide"
        
        # Caract√®res autoris√©s
        allowed_chars = set('abcdefghijklmnopqrstuvwxyz_-')
        if not all(c in allowed_chars for c in zone_name.lower()):
            return False, "Nom de zone contient des caract√®res non autoris√©s"
        
        return True, None
    
    def _calculate_quality_metrics(self, buildings: List[Building]) -> Dict:
        """Calcule les m√©triques de qualit√© pour une liste de b√¢timents"""
        if not buildings:
            return {'quality_score': 0}
        
        total = len(buildings)
        
        # M√©triques de base
        with_osm_tags = sum(1 for b in buildings if b.osm_tags)
        valid_coords = sum(1 for b in buildings if 0.5 <= b.latitude <= 7.5 and 99.0 <= b.longitude <= 120.0)
        valid_surface = sum(1 for b in buildings if b.surface_area_m2 > 0)
        
        # Score global
        completeness_score = (with_osm_tags / total) * 100
        coord_score = (valid_coords / total) * 100
        surface_score = (valid_surface / total) * 100
        
        overall_score = (completeness_score + coord_score + surface_score) / 3
        
        return {
            'quality_score': round(overall_score, 1),
            'completeness_percent': round(completeness_score, 1),
            'valid_coordinates_percent': round(coord_score, 1),
            'valid_surface_percent': round(surface_score, 1),
            'total_buildings': total
        }
    
    def _generate_building_statistics(self, buildings: List[Building]) -> Dict:
        """G√©n√®re des statistiques sur les b√¢timents"""
        if not buildings:
            return {}
        
        # Comptage par type
        type_counts = {}
        total_surface = 0
        total_consumption = 0
        
        for building in buildings:
            # Type de b√¢timent
            building_type = building.building_type or 'unknown'
            type_counts[building_type] = type_counts.get(building_type, 0) + 1
            
            # Totaux
            total_surface += building.surface_area_m2
            total_consumption += building.base_consumption_kwh
        
        return {
            'type_distribution': type_counts,
            'total_surface_m2': round(total_surface, 1),
            'average_surface_m2': round(total_surface / len(buildings), 1),
            'total_consumption_kwh_per_day': round(total_consumption, 1),
            'average_consumption_kwh_per_day': round(total_consumption / len(buildings), 1)
        }
    
    def _get_fallback_suggestions(self, zone_name: str) -> List[str]:
        """G√©n√®re des suggestions en cas d'√©chec"""
        suggestions = [
            "V√©rifiez l'orthographe du nom de zone",
            "Essayez une zone plus petite",
            "Consultez la liste des zones disponibles"
        ]
        
        # Suggestions sp√©cifiques selon le nom
        if 'malaysia' in zone_name.lower():
            suggestions.append("Le pays entier peut prendre plusieurs heures - essayez un √©tat sp√©cifique")
        
        return suggestions
    
    def test_connection(self) -> bool:
        """
        Teste la connexion aux services OSM
        
        Returns:
            bool: True si la connexion fonctionne
        """
        try:
            from src.core.osm_handler import test_osm_connection
            return test_osm_connection()
        except Exception as e:
            logger.error(f"‚ùå Erreur test connexion OSM: {str(e)}")
            return False
    
    def get_service_status(self) -> Dict:
        """
        Retourne le statut du service OSM
        
        Returns:
            Dict: Statut et statistiques du service
        """
        uptime = datetime.now() - self.service_statistics['service_start_time']
        
        success_rate = 0
        total_queries = self.service_statistics['successful_queries'] + self.service_statistics['failed_queries']
        if total_queries > 0:
            success_rate = (self.service_statistics['successful_queries'] / total_queries) * 100
        
        return {
            'service_name': 'OSM Service',
            'status': 'active',
            'connection_ok': self.test_connection(),
            'uptime_seconds': int(uptime.total_seconds()),
            'statistics': {
                'successful_queries': self.service_statistics['successful_queries'],
                'failed_queries': self.service_statistics['failed_queries'],
                'success_rate_percent': round(success_rate, 1),
                'total_buildings_loaded': self.service_statistics['total_buildings_loaded']
            }
        }
    
    def get_statistics(self) -> Dict:
        """
        Retourne les statistiques d√©taill√©es du service
        
        Returns:
            Dict: Statistiques compl√®tes
        """
        return self.service_statistics.copy()